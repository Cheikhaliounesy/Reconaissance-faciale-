import streamlit as st
import cv2
import numpy as np
from PIL import Image

# Titre de l'application
st.title("Détection de Visages")

# Instructions pour l'utilisateur
st.markdown("""
### Instructions
1. Téléchargez une image à partir de votre appareil.
2. Choisissez la couleur des rectangles pour les visages détectés.
3. Ajustez les paramètres `minNeighbors` et `scaleFactor` pour affiner la détection.
4. Cliquez sur le bouton pour détecter les visages.
5. Vous pouvez enregistrer l'image résultante sur votre appareil.
""")

# Téléchargement de l'image
uploaded_file = st.file_uploader("Télécharger une image", type=["jpg", "jpeg", "png"])

# Choix de la couleur
rectangle_color = st.color_picker("Choisissez la couleur des rectangles", "#FF0000")

# Paramètres pour la détection des visages
min_neighbors = st.slider("Ajustez le paramètre minNeighbors", min_value=1, max_value=10, value=5)
scale_factor = st.slider("Ajustez le paramètre scaleFactor", min_value=1.01, max_value=2.0, step=0.01, value=1.1)

if uploaded_file is not None:
    # Lecture de l'image
    image = Image.open(uploaded_file)
    image_np = np.array(image)

    # Conversion en niveaux de gris
    gray = cv2.cvtColor(image_np, cv2.COLOR_BGR2GRAY)

    # Chargement du classificateur de visage
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

    # Détection des visages
    faces = face_cascade.detectMultiScale(gray, scaleFactor=scale_factor, minNeighbors=min_neighbors)

    # Dessin des rectangles autour des visages
    for (x, y, w, h) in faces:
        cv2.rectangle(image_np, (x, y), (x + w, y + h), tuple(int(rectangle_color[i:i+2], 16) for i in (1, 3, 5)), 2)

    # Affichage de l'image résultante
    st.image(image_np, channels="RGB", caption='Image avec Visages Détectés')

    # Enregistrement de l'image
    if st.button("Enregistrer l'image"):
        output_file = "detected_faces.png"
        cv2.imwrite(output_file, image_np)
        st.success(f"Image enregistrée sous {output_file} !")

